import argparse
import yaml
import textwrap
from pydantic import BaseModel


class OutputConfig (BaseModel):
    language: str
    path: str
    add_prefix: bool = False


class Constant (BaseModel):
    name: str
    values: list[str]
    options: list[str] = []


class Config (BaseModel):
    constants : list[Constant]
    outputs: list[OutputConfig]


class Outputer:
    def __init__(self, config: OutputConfig, comment_mark="#"):
        self.output = open(config.path, "w")
        self.config = config
        self.comment_mark = comment_mark
    
    def __del__(self):
        self.output.close()

    def output_constant(self, constant : Constant):
        raise NotImplemented()

    def output_header(self):
        self.output.write(f"{self.comment_mark} autogenerated by reconstant - do not edit!\n")

    def output_footer(self):
        pass

    def _do_standard_output(self, constant: Constant, prefix="", assignment="=", suffix=""):
        # TODO: rename values to keys?
        for (i, key) in enumerate(constant.values):
            if "stringify" in constant.options:
                value = f"'{key}'"
            else:
                value = f"{i}"
            self.output.write(f"{prefix}{key} {assignment} {value}{suffix}\n")


class PythonOutputer (Outputer):
    
    def output_constant(self, constant : Constant):
        if self.config.add_prefix:
            self._do_standard_output(constant, prefix=f"{constant.name}_")
        else:
            self._do_standard_output(constant)


class JavascriptOutputer (Outputer):
    def __init__(self, config: OutputConfig):
        super().__init__(config, comment_mark="//")

    def output_constant(self, constant : Constant):
        self.output.write(f"const {constant.name.capitalize()} = {{\n")
        self._do_standard_output(constant, prefix=f"\t", assignment=":", suffix=",")
        self.output.write(f"}}\n")


class VueMixinOutputer (JavascriptOutputer):
    # TODO: handle multiple constants using header and footer
    def output_constant(self, constant : Constant):
        super().output_constant(constant)
        name = constant.name.capitalize()
        self.output.write(textwrap.dedent(f"""\
            
            {name}.Mixin = {{
              created () {{
                  this.{name} = {name}
              }}
            }}
            
            export default {name}
            """))


def create_outputer(output_config : OutputConfig):
    if output_config.language == "python":
        return PythonOutputer(output_config)
    elif output_config.language == "javascript":
        return JavascriptOutputer(output_config)
    elif output_config.language == "vue-mixin":
        return VueMixinOutputer(output_config)


def process_input(config: Config):
    outputers = [create_outputer(x) for x in config.outputs]
    for outputer in outputers:
        outputer.output_header()
        for constant in config.constants:
            outputer.output_constant(constant)
        outputer.output_footer()
    

def main():
    parser = argparse.ArgumentParser(description='Reconstant - Share constant definitions between programming languages and make your constants constant again.')
    parser.add_argument('input', type=str, help='input file in yaml format')
    args = parser.parse_args()

    with open(args.input, "r") as yaml_input:
        python_obj = yaml.safe_load(yaml_input)
        config = Config.parse_obj(python_obj)
        process_input(config)

if __name__ == "__main__":
    main()